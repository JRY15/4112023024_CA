def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    return quick_sort(left) + middle + quick_sort(right)

def merge_sort(arr):
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = arr[:mid]
    right = arr[mid:]

    left = merge_sort(left)
    right = merge_sort(right)

    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0

    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1

    result += left[i:]
    result += right[j:]
    return result

def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i - 1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

if __name__ == "__main__":
    arr = [12, 11, 13, 5, 6, 7]

    print("Original array:", arr)

    # Quick Sort
    quick_sorted = quick_sort(arr.copy())
    print("Quick Sort:")
    print("Best Case:", sorted(arr))
    print("Worst Case:", sorted(arr, reverse=True))

    # Merge Sort
    merge_sorted = merge_sort(arr.copy())
    print("\nMerge Sort:")
    print("Best Case:", sorted(arr))
    print("Worst Case:", sorted(arr, reverse=True))

    # Bubble Sort
    bubble_sort(arr.copy())
    print("\nBubble Sort:")
    print("Best Case:", sorted(arr))
    print("Worst Case:", sorted(arr, reverse=True))

    # Insertion Sort
    insertion_sort(arr.copy())
    print("\nInsertion Sort:")
    print("Best Case:", sorted(arr))
    print("Worst Case:", sorted(arr, reverse=True))
